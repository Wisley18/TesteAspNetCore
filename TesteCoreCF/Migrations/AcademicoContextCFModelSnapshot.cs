// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteCoreCF.Models.Entities;

namespace TesteCoreCF.Migrations
{
    [DbContext(typeof(AcademicoContextCF))]
    partial class AcademicoContextCFModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("TesteCoreCF.Models.Entities.Alternativa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<DateTimeOffset?>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("IdQuestao")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("StatusRegistro")
                        .HasColumnType("enum('1','2','3')");

                    b.Property<string>("Texto")
                        .IsUnicode(false);

                    b.Property<string>("TipoResposta")
                        .HasColumnType("enum('1','2','3')");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestao")
                        .HasName("fk_Alternativa_MultiplaEscolha1_idx");

                    b.ToTable("Alternativa","Academico");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.MultiplaEscolha", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("fk_MultiplaEscolha_Questao1_idx");

                    b.ToTable("MultiplaEscolha","Academico");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.Questao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<DateTimeOffset?>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("StatusRegistro")
                        .HasColumnType("enum('1','2','3')");

                    b.Property<string>("Texto")
                        .IsUnicode(false);

                    b.Property<string>("Tipo")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Questao","Academico");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.QuestaoTema", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<DateTimeOffset?>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Dificuldade")
                        .HasColumnType("enum('1','2','3')");

                    b.Property<long>("IdQuestao")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("IdTema")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Relevancia")
                        .HasColumnType("enum('1','2','3')");

                    b.Property<string>("StatusRegistro")
                        .HasColumnType("enum('1','2','3')");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestao")
                        .HasName("fk_QuestaoTema_Questao1_idx");

                    b.HasIndex("IdTema")
                        .HasName("fk_QuestaoTema_Tema_idx");

                    b.ToTable("QuestaoTema","Academico");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.Tema", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<DateTimeOffset?>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegistro")
                        .HasColumnType("enum('1','2','3')");

                    b.HasKey("Id");

                    b.ToTable("Tema","Academico");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.Alternativa", b =>
                {
                    b.HasOne("TesteCoreCF.Models.Entities.MultiplaEscolha", "MultiplaEscolha")
                        .WithMany("Alternativa")
                        .HasForeignKey("IdQuestao")
                        .HasConstraintName("fk_Alternativa_MultiplaEscolha1");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.MultiplaEscolha", b =>
                {
                    b.HasOne("TesteCoreCF.Models.Entities.Questao", "Questao")
                        .WithOne("MultiplaEscolha")
                        .HasForeignKey("TesteCoreCF.Models.Entities.MultiplaEscolha", "Id")
                        .HasConstraintName("fk_MultiplaEscolha_Questao1");
                });

            modelBuilder.Entity("TesteCoreCF.Models.Entities.QuestaoTema", b =>
                {
                    b.HasOne("TesteCoreCF.Models.Entities.Questao", "Questao")
                        .WithMany("QuestaoTema")
                        .HasForeignKey("IdQuestao")
                        .HasConstraintName("fk_QuestaoTema_Questao1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TesteCoreCF.Models.Entities.Tema", "Tema")
                        .WithMany("QuestaoTema")
                        .HasForeignKey("IdTema")
                        .HasConstraintName("fk_QuestaoTema_Tema")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
